{
  "Name": "Query",
  "Description": "",
  "Script": "from SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import unix_now, convert_unixtime_to_datetime, output_handler\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED,EXECUTION_STATE_TIMEDOUT\nfrom SiemplifyUtils import add_prefix_to_dict, flat_dict_to_csv, convert_dict_to_json_result_dict\nfrom time import strftime\nfrom SiemplifyDataModel import EntityTypes\nfrom sb_manager import SandBlast_Manager\nimport requests\nimport json, copy\n\n# CONSTS\nSCRIPT_NAME = \"sb_query\"\n\ndef get_unicode(u):\n    return str(u)\n\ndef dict_to_flat(target_dict):\n    \"\"\"\n    Receives nested dictionary and returns it as a flat dictionary.\n    :param target_dict: {dict}\n    :return: Flat dict : {dict}\n    \"\"\"\n    target_dict = copy.deepcopy(target_dict)\n\n    def expand(raw_key, raw_value):\n        key = raw_key\n        value = raw_value\n        \"\"\"\n        :param key: {string}\n        :param value: {string}\n        :return: Recursive function.\n        \"\"\"\n        if value is None:\n            return [(get_unicode(key), u\"\")]\n        elif isinstance(value, dict):\n            # Handle dict type value\n            return [(u\"{0}_{1}\".format(get_unicode(key),\n                                       get_unicode(sub_key)),\n                     get_unicode(sub_value)) for sub_key, sub_value in dict_to_flat(value).items()]\n        elif isinstance(value, list):\n            # Handle list type value\n            count = 1\n            l = []\n            items_to_remove = []\n            for value_item in value:\n                if isinstance(value_item, dict):\n                    # Handle nested dict in list\n                    l.extend([(u\"{0}_{1}_{2}\".format(get_unicode(key),\n                                                     get_unicode(count),\n                                                     get_unicode(sub_key)),\n                               sub_value)\n                              for sub_key, sub_value in dict_to_flat(value_item).items()])\n                    items_to_remove.append(value_item)\n                    count += 1\n                elif isinstance(value_item, list):\n                    l.extend(expand(get_unicode(key) + u'_' + get_unicode(count), value_item))\n                    count += 1\n                    items_to_remove.append(value_item)\n\n            for value_item in items_to_remove:\n                value.remove(value_item)\n\n            for value_item in value:\n                l.extend([(get_unicode(key) + u'_' + get_unicode(count), value_item)])\n                count += 1\n\n            return l\n        else:\n            return [(get_unicode(key), get_unicode(value))]\n\n    items = [item for sub_key, sub_value in target_dict.items() for item in\n             expand(sub_key, sub_value)]\n    return dict(items)\n\ndef dict2str(d):\n    if type(d) != dict: return d \n    d_vals = []\n    msg = \"\"\n    \n    for key, val in d.items(): \n        if type(val) == dict: continue \n        d_vals.append(\"{}: {}\".format(key.replace('_', ' ').capitalize(), str(val)))\n        \n    return msg + \"\\n\".join(d_vals)\n    \ndef get_feature_name(s): \n    if s == \"te\": return \"Threat Emulation\"\n    elif s == \"av\": return \"Anti Virus\"\n    elif s == \"extraction\": return \"Threat Extraction\"\n    \ndef get_severity(feature_name, obj):\n    if (feature_name == \"av\"):\n        try: \n            return int(obj[feature_name][\"malware_info\"][\"severity\"])\n        except:\n            return 0\n    else: \n        return 0 \n        \ndef get_results(feature_name, obj):\n    if feature_name == \"av\": \n        try:  return obj[\"av\"][\"malware_info\"]\n        except: pass\n        try: return obj[\"av\"][\"status\"]\n        except: pass\n        return {}\n    else: \n        try: return obj[feature_name][\"status\"]\n        except: return {}\n\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n    configurations = siemplify.get_configuration('CheckPoint SandBlast')\n    api_url = configurations['api_url']\n    api_key = configurations['api_key']\n    \n    siemplify.script_name = SCRIPT_NAME\n    result_value = False\n    output_message = \"No entities were enriched\"\n    json_result = {}\n\n    successful_entities = []\n    script_directory = siemplify.run_folder\n    sb_features = [\"te\", \"av\", \"extraction\"]\n    req = None \n    \n    sbmanager = SandBlast_Manager(api_key=api_key, url=api_url)\n    \n    siemplify.LOGGER.info(\"----------------- Main - Started -----------------\")\n    \n    file_hash = \"\"\n    entity_objs = []\n    \n    for entity in siemplify.target_entities:\n        if entity.entity_type == EntityTypes.FILEHASH: \n            file_hash = entity.identifier\n            entity_objs.append(entity)\n            \n            file_hash = entity.identifier\n            file_name = \"untitled.doc\"\n            req = sbmanager.query(file_hash, file_name)\n            \n            if not req:\n                continue\n            \n            successful_entities.append(entity)\n            json_result[entity.identifier] = req\n            for feature in sb_features:\n                if feature in req.keys():\n                    feature_name = get_feature_name(feature)\n                    feature_res = get_results(feature, req)\n                    \n                    insight_text = feature_name.upper() + \"\\n\" + dict2str(feature_res)\n                    cp_severity = get_severity(feature, req)\n        \n                    siemplify.create_case_insight(triggered_by=\"Checkpoint SandBlast\", \n                                                    title=feature_name, \n                                                    content=insight_text,\n                                                    severity=0,\n                                                    insight_type=1,\n                                                    entity_identifier = file_hash\n                                                    )\n                    if cp_severity > 0 or req[feature].get(\"combined_verdict\") == \"malicious\":\n                        entity.is_suspicious = True\n                        result_value = True\n                    entity.additional_properties.update(add_prefix_to_dict(dict_to_flat(feature_res), \"CP_{}\".format(feature_name)))\n                    \n            \n    if successful_entities:\n        siemplify.update_entities(successful_entities)\n        output_message = \"Following entities were enriched:\\n{}\".format(\"\\n\".join([x.identifier for x in successful_entities]))\n\n    siemplify.result.add_result_json(convert_dict_to_json_result_dict(json_result))\n    siemplify.end(output_message, result_value)\n\n\nif __name__ == \"__main__\":\n    main()",
  "IntegrationIdentifier": "Check Point Sandblast",
  "ScriptResultName": "ScriptResult",
  "DynamicResultsMetadata": [
    {
      "ResultName": "JsonResult",
      "ResultExample": "{}",
      "ShowResult": true
    }
  ],
  "Creator": "Admin",
  "IsEnabled": true,
  "IsCustom": true,
  "IsSystem": false,
  "Version": 37.0,
  "TimeoutSeconds": 300,
  "Parameters": [],
  "DefaultResultValue": "",
  "PythonVersion": "None",
  "Id": 0,
  "CreationTimeUnixTimeInMs": 1598791090843,
  "ModificationTimeUnixTimeInMs": 1598791090846
}