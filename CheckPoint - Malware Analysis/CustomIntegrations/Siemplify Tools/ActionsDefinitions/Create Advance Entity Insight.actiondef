{
  "Name": "Create Advance Entity Insight",
  "Description": "The action was created to replace the use of the add insight action and create a unique insight per entity based on the json result of previous actions in the playbook",
  "Script": "from SiemplifyUtils import output_handler\nimport json\nfrom SiemplifyAction import SiemplifyAction\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED\n\n# CONSTS:\nENTITY_IDENTIFIER_FIELD_NAME = \"Entity\"\nJSON_DATA_FIELD_NAME = \"EntityResult\"\nMULTIPLE_VALUES = \"MULTIPLE VALUES FOUND\"\nMISSING_VAL = \"NotFound\"\nNOT_SIMPLE_VAL = \"Value is a dict\"\nNOT_FOR_TABLE = \"NO_TABLE\"\n\ndef GetIdentifiersAsString(target_entities):\n    entitiesIdentifiers = []\n    for entity in target_entities:\n        entitiesIdentifiers.append(entity.identifier)\n    return \", \".join(entitiesIdentifiers)\n\ndef GetEntityByString(identifier, entities):\n    for ent in entities:\n        if identifier.lower() == ent.identifier.lower():\n            return ent\n    return None\n\ndef process_trios(trio_list):\n    bad_json = []\n    insight_data = []\n    for trio in trio_list:\n        if trio.get(\"title\") : # We expect some values here\n            data_obj = {}\n            data_obj[\"title\"] = trio.get(\"title\")\n            try:\n                data_obj[\"fields\"] = process_fields_string(trio.get(\"fields\"))\n            except Exception as e:\n                raise Exception(\"Syntax error. Error message is: {}\".format(e))\n            try:\n                data_obj[\"json\"] = trio.get(\"json\")\n            except:\n                bad_json.append(data_obj)\n                continue\n            insight_data.append(data_obj)\n    \n    return insight_data, bad_json\n\ndef process_fields_string(fields_list):\n    \"\"\"\n    Gets a string of the format: \"Count:path1.path2.length,RISK:path3.path4.risk_score\"\n    and breaks it into list of objects: {\"display\": STRING, \"key_path\": STRING(path1.path2.path3)}\n    \n    Key characters: \",\" and \":\". \":\" marks the separation between display and path where \",\" marks separation between fields\n    \"\"\"\n    if not fields_list:\n        return []\n    \n    fields_data = []\n    #raise Exception(json.dumps(field_string))\n    for item in fields_list:\n        field_item = {}\n        field_item[\"key_path\"] = item[\"XPath\"]\n        if item[\"Display\"]:\n            field_item[\"display\"] = item[\"Display\"]\n        else:\n            field_item[\"display\"] = NOT_FOR_TABLE\n        field_item[\"format_string\"] = item.get(\"FormatString\", \"{}\")\n        fields_data.append(field_item)\n    \n    # field_string = field_string.replace(u\"\\n\", u\",\")\n    # for field_rep in field_string.split(\",\"):\n    #     if field_rep.strip(): # Ignore empty\n    #         temp = field_rep.strip().split(\":\")\n    #         display = temp[0]\n    #         if len(temp) == 1:\n    #             key_path = temp[0].split(\".\")\n    #             fields_data.append({\"display\": NOT_FOR_TABLE, \"key_path\": key_path})\n    #             continue\n    #             #raise Exception(\"Field definition missing ':'. Field: {}\".format(field_rep))\n    #         elif len(temp) != 2:\n    #             raise Exception(\"General issue with the formating of the field: {}\".format(json.dumps(field_rep)))\n    #         key_path = temp[1].split(\".\")\n    #         fields_data.append({\"display\": display.strip(), \"key_path\": [x.strip() for x in key_path]})\n    return fields_data\n\ndef extract_json_based_on_entity(entity, json_data):\n    try:\n        if not isinstance(json_data, list):\n            return None\n        \n        for item in json_data: # Assuming regular list format for enrichment actions\n            if item[ENTITY_IDENTIFIER_FIELD_NAME].lower() == entity.identifier.lower():\n                return item[JSON_DATA_FIELD_NAME]\n    except:\n        raise Exception(json_data)\n    return None\n\ndef find_key_path_in_json(key_path, json_data):\n    \"\"\"\n    Finds the relevant key_path in a json object. \n    If list encountered, if its of len 1, its value is used. Otherwise, it exits with default value (MULTIPLE VALUES FOUND)\n    \"\"\"\n    return find_key_path_recursive(key_path, json_data)\n    \ndef find_key_path_recursive(key_list, current_json):\n    if key_list:\n        if isinstance(current_json, list):\n            if key_list:\n                if len(current_json) == 1:\n                    return find_key_path_recursive(key_list, current_json[0])\n                else:\n                    return MULTIPLE_VALUES\n            return \", \".join(current_json)\n        if isinstance(current_json, dict):\n            if key_list[0] in current_json:\n                return find_key_path_recursive(key_list[1:], current_json[key_list[0]])\n            # raise Exception(\"Key: {}, json: {}\".format(key_list, current_json))\n            return MISSING_VAL\n    else:\n        if isinstance(current_json, dict):\n            return NOT_SIMPLE_VAL\n        if isinstance(current_json, list):\n            ret_list = []\n            for item in current_json:\n                if isinstance(item, dict) or isinstance(item, list):\n                    return NOT_SIMPLE_VAL\n                ret_list.append(item) \n            return u\",\".join(ret_list)\n        \n        return u\"{}\".format(current_json) # Found val, return it. Format to make everything into string\n    \n\ndef fix_json_string(json_string, unique_marker_string):\n    if not unique_marker_string:\n        return json_string\n    \n    to_return = \"\"\n    chunks = json_string.split(unique_marker_string)\n    if len(chunks) % 2 == 0: # Odd number of chunks\n        raise Exception(\"Uneven amount of JSON separators\")\n    i = 1\n    to_return += chunks[0]\n    while i + 1 < len(chunks):\n        to_return += json.dumps(chunks[i])\n        to_return += chunks[i+1]\n        i += 2\n    return to_return\n\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n    \n    added_insights = []\n    \n    input_trios = []\n    \n    try:\n        in_json = fix_json_string(siemplify.parameters.get(\"JSON_DATA\"), siemplify.parameters.get(\"JSON Marker\"))\n        json_data_input = json.loads(in_json)\n        # for i in range(1,8):\n        #     input_trios.append({\"title\": siemplify.parameters.get('Title{}'.format(i)), \n        #                         \"fields\": siemplify.parameters.get('Fields{}'.format(i)), \n        #                         \"json\": siemplify.parameters.get('JSON{}'.format(i))\n        #     })\n        for item in json_data_input:\n            trio = {}\n            trio[\"title\"] = item[\"TriggeredBy\"]\n            try:\n                trio[\"json\"] = json.loads(item[\"JSON\"])\n            except:\n                trio[\"json\"] = item[\"JSON\"]\n            trio[\"fields\"] = item[\"Fields\"]\n            input_trios.append(trio)\n        # raise Exception(input_trios)\n        processed_trios, bad_trios = process_trios(input_trios)\n        \n        for ent in siemplify.target_entities:\n            found_at_least_one_value = False\n            insight_message_list = []\n            insight_message = u\"\"\n            for trio in processed_trios:\n                trio_message_list = []\n                not_for_tables = []\n                json_data = extract_json_based_on_entity(ent, trio[\"json\"])\n                if json_data:\n                    for item in trio.get(\"fields\", []):\n                        display = item[\"display\"]\n                        key_path = item[\"key_path\"]\n                        \n                        val = find_key_path_in_json(key_path, json_data)\n                        if val:\n                            found_at_least_one_value = True\n                            try:\n                                val = item[\"format_string\"].format(val)\n                            except:\n                                val = val # Skip the format string\n                        new_item = {\"display\": display, \"value\": val}\n                        if display == NOT_FOR_TABLE:\n                            not_for_tables.append(new_item)\n                        else:\n                            trio_message_list.append(new_item)\n                    \n                    if found_at_least_one_value:\n                        trio_message_list = [x for x in trio_message_list if x[\"value\"] != MISSING_VAL] + \\\n                                            [{\"display\": \"\", \"value\": \"\"}] + \\\n                                            [x for x in trio_message_list if x[\"value\"] == MISSING_VAL]\n                        \n                        rows_list = [\"\"\"<td><strong>{display}</strong></td><td>{value}</td></tr>\"\"\".format(**trio_message_item) for trio_message_item in trio_message_list]\n                        rows = \"\".join(rows_list)\n                        \n                        trio_message = u\"\"\"<table border=\"1\" width=\"290\"><tbody><tr>{rows}<tr></tbody></table>\"\"\".format(\n                             rows=rows)\n                        \n                        title_message_list = []\n                        not_for_tables_message = []\n                        if not_for_tables:\n                            not_for_tables_message = u\"<br>\".join([x[\"value\"] for x in not_for_tables])\n                            title_message_list.append(not_for_tables_message)\n                        if trio_message:\n                            title_message_list.append(trio_message)\n                        \n                        title_message = u\"<br>\".join([x for x in [trio_message, not_for_tables_message] if x])\n                        siemplify.add_entity_insight(ent, title_message, triggered_by=trio.get(\"title\"))\n                        insight_message_list.append(title_message)\n                        added_insights.append(ent)\n                    else:\n                        pass # No need for insight if no field returned with data\n                else:\n                    pass  # No need for insight incase there is no data for entity\n                    # title_message = \"\"\"Not Found\"\"\"\n                    # insight_message_list.append(title_message)\n                    # siemplify.add_entity_insight(ent, title_message, triggered_by=trio.get(\"title\"))\n            \n                \n            if bad_trios:\n                insight_message += u\"<br><br>\"\n                insight_message += u\"<br><br>\".join([u\"\"\"JSON Completly missing or badly formatted\"\"\".format(\n                        trio.get('title')) for trio in bad_trios])\n                for trio in bad_trios:\n                    title_message = \"\"\"JSON Completly missing or badly formatted\"\"\"\n                    siemplify.add_entity_insight(ent, title_message, triggered_by=trio.get(\"title\"))\n    \n            \n    \n        output_message = u\"Insight added to following entities: {}\".format(\",\".join([x.identifier for x in added_insights]))\n    \n        siemplify.end(output_message, 'true')\n    except Exception as e:\n        #raise\n        siemplify.end(\"Errors found: {}\".format(e), 'Failed', EXECUTION_STATE_FAILED)\n\n\nif __name__ == '__main__':\n    main()\n    ",
  "IntegrationIdentifier": "Siemplify Tools",
  "ScriptResultName": "ScriptResult",
  "DynamicResultsMetadata": [
    {
      "ResultName": "JsonResult",
      "ResultExample": "{}",
      "ShowResult": true
    }
  ],
  "Creator": "Robert Becker",
  "IsEnabled": true,
  "IsCustom": true,
  "IsSystem": false,
  "Version": 37.0,
  "TimeoutSeconds": 300,
  "Parameters": [
    {
      "CustomActionId": 0,
      "IsMandatory": true,
      "DefaultValue": "123654789",
      "Description": "A unique string to use to \"surround\" strings that should be \"dumped\" before loading the complete JSON",
      "Name": "JSON Marker",
      "Value": "123654789",
      "Type": 0,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1598424406779,
      "ModificationTimeUnixTimeInMs": 1598424406779
    },
    {
      "CustomActionId": 0,
      "IsMandatory": true,
      "DefaultValue": "[     {         \"TriggeredBy\": \"Siemplify\",         \"Fields\": [             {                 \"Display\": \"\",                 \"XPath\": [                     \"IsSuspicious\",                     \"Complex\"                 ],                 \"FormatString\": \"Please help me \\\"{}\\\" here is data\"             }         ],         \"JSON\": [             {                 \"Entity\": \"F.ATTACKER4@GMAIL.COM\",                 \"EntityResult\": {                     \"id\": \"1.2.3.4\",                     \"IsSuspicious\": {                         \"simply\": \"Yes\",                         \"Complex\": \"Could be, probebly\"                     }                 }             }         ]     } ]",
      "Description": "A JSON describing all input data as well as xpaths for insight display.\nData is represented as JSON from the action's json result.",
      "Name": "JSON_DATA",
      "Value": "[     {         \"TriggeredBy\": \"Siemplify\",         \"Fields\": [             {                 \"Display\": \"\",                 \"XPath\": [                     \"IsSuspicious\",                     \"Complex\"                 ],                 \"FormatString\": \"Please help me \\\"{}\\\" here is data\"             }         ],         \"JSON\": [             {                 \"Entity\": \"F.ATTACKER4@GMAIL.COM\",                 \"EntityResult\": {                     \"id\": \"1.2.3.4\",                     \"IsSuspicious\": {                         \"simply\": \"Yes\",                         \"Complex\": \"Could be, probebly\"                     }                 }             }         ]     } ]",
      "Type": 0,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1598424406779,
      "ModificationTimeUnixTimeInMs": 1598424406779
    }
  ],
  "DefaultResultValue": "",
  "PythonVersion": "None",
  "Id": 0,
  "CreationTimeUnixTimeInMs": 1598424406776,
  "ModificationTimeUnixTimeInMs": 1598424406776
}