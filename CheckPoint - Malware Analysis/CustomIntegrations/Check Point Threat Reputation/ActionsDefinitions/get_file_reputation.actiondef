{
  "Name": "get_file_reputation",
  "Description": "",
  "Script": "from SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import unix_now, convert_unixtime_to_datetime, output_handler\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED,EXECUTION_STATE_TIMEDOUT\nfrom SiemplifyDataModel import EntityTypes\nfrom cp_tr_manager import CheckPoint_TR_Manager\n# Example Consts:\nINTEGRATION_NAME = \"Check Point Threat Reputation\"\n\nSCRIPT_NAME = \"get_file_reputation\"\n\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n    siemplify.script_name = SCRIPT_NAME\n    siemplify.LOGGER.info(\"[ INFO ] ================= Main - Param Init =================\")\n\n    # INIT INTEGRATION CONFIGURATION:\n    client_key = siemplify.extract_configuration_param(provider_name=INTEGRATION_NAME,\n                                                    param_name=\"Client Key\")\n    api_root = siemplify.extract_configuration_param(provider_name=INTEGRATION_NAME,\n                                                    param_name=\"API Root\")\n                                                    \n    cp_manager = CheckPoint_TR_Manager(client_key=client_key, api_root=api_root)\n    confidence_threshold = 0\n    \n    siemplify.LOGGER.info(\"[ INFO ] ----------------- Main - Started -----------------\")\n    try:\n        status = EXECUTION_STATE_COMPLETED  # used to flag back to siemplify system, the action final status\n        output_message = \"output message :\"  # human readable message, showed in UI as the action result\n        result_value = None  # Set a simple result value, used for playbook if\\else and placeholders.\n        failed_entities = []  # In case this actions contains entity based logic, collect failed entity.identifiers\n        successfull_entities = []  # In case this actions contains entity based logic, collect successfull entity.identifiers\n        white_list_class = [\"Benign\", \"Unclassified\"]\n\n        for entity in siemplify.target_entities:\n            siemplify.LOGGER.info(\"[ INFO ] Started processing entity: {}\".format(entity.identifier))\n            if unix_now() >= siemplify.execution_deadline_unix_time_ms:\n                siemplify.LOGGER.error(\"[ ERROR ] Timed out. execution deadline ({}) has passed\".format(convert_unixtime_to_datetime(siemplify.execution_deadline_unix_time_ms)))\n                status = EXECUTION_STATE_TIMEDOUT\n                break\n            if entity.entity_type == EntityTypes.FILEHASH:\n                try:\n                    print(\"Attempting to fetch file data\")\n                    rep_data = cp_manager.get_file_rep(entity.identifier)['response'][0]\n                    rep_data_string = \"\"\"Classification: {}\n                                        Confidence: {}\n                                        Severity: {}\n                                        Risk: {}\n                                        \"\"\".format(rep_data['reputation']['classification'],\n                                                    rep_data['reputation']['confidence'],\n                                                    rep_data['reputation']['severity'],\n                                                    rep_data['risk'])\n                    try:\n                        indications = \"\\n\".join(rep_data['context']['indications'])\n                        rep_data_string = rep_data_string + \"\\n\" + indications\n                    except Exception as e: \n                        print(\"No indications insight added.\")\n                    siemplify.add_entity_insight(entity, rep_data_string)\n                    entity.additional_properties.update(rep_data['reputation'])\n                    entity.is_enriched = True\n                    siemplify.result.add_result_json(rep_data)\n                    if rep_data['risk'] > confidence_threshold and rep_data['reputation']['classification'] not in white_list_class:\n                        print('Entity {} found to be suspicious (!!!)'.format(entity.identifier))\n                        entity.is_suspicious = True\n                    else: \n                        entity.is_suspicious = False\n                        print('Entity {} NOT found to be suspicious'.format(entity.identifier))\n                    # .... CUSTOM ENTITY BASED LOGIC HERE....\n                    successfull_entities.append(entity)\n                    siemplify.LOGGER.info(\"[ INFO ] Finished processing entity {0}\".format(entity.identifier))\n                    pass\n                except Exception as e:\n                    failed_entities.append(entity.identifier)\n                    print(e)\n                    siemplify.LOGGER.error(\"[ ERROR ] An error occurred on entity {0}\".format(entity.identifier))\n                    siemplify.LOGGER.exception(e)\n            else:\n                siemplify.LOGGER.info(\"[ INFO ] Skipping entity {} - not a URL\".format(entity.identifier))\n\n        if successfull_entities:\n            siemplify.update_entities(successfull_entities)\n            output_message += \"\\n Successfully processed entities:\\n   {}\".format(\"\\n   \".join(list(map(lambda x: x.identifier, successfull_entities))))\n        else:\n            output_message += \"\\n No entities where processed.\"\n\n        # Set a simple result value, used for playbook if\\else and placeholders. Can be of any type (bool, string, number), and used for any desire\n        # As an exmaple of arbitrary logic, we passed here the number of successfull processed entities - again, it's just an example.\n        result_value = len(successfull_entities)\n\n        if failed_entities:\n            output_message += \"\\n Failed processing entities:\\n   {}\".format(\"\\n   \".join(failed_entities))\n            status = EXECUTION_STATE_FAILED\n\n    except Exception as e:\n        siemplify.LOGGER.error(\"[ ERROR ] General error performing action {}\".format(SCRIPT_NAME))\n        siemplify.LOGGER.exception(e)\n        raise  # used to return entire error details - including stacktrace back to client UI. Best for most usecases\n        # in case you want to handle the error yourself, don't raise, and handle error result ouputs:\n        status = EXECUTION_STATE_FAILED\n        result_value = \"Failed\"\n        output_message += \"\\n unknown failure\"\n\n\n    siemplify.LOGGER.info(\"[ INFO ] ----------------- Main - Finished -----------------\")\n    siemplify.LOGGER.info(\"[ INFO ] \\n  status: {}\\n  result_value: {}\\n  output_message: {}\".format(status,result_value, output_message))\n    siemplify.end(output_message, result_value, status)\n\n\nif __name__ == \"__main__\":\n    main()\n",
  "IntegrationIdentifier": "Check Point Threat Reputation",
  "ScriptResultName": "ScriptResult",
  "DynamicResultsMetadata": [
    {
      "ResultName": "JsonResult",
      "ResultExample": "{}",
      "ShowResult": true
    }
  ],
  "Creator": "Admin",
  "IsEnabled": true,
  "IsCustom": true,
  "IsSystem": false,
  "Version": 33.0,
  "TimeoutSeconds": 300,
  "Parameters": [],
  "DefaultResultValue": "",
  "PythonVersion": "None",
  "Id": 0,
  "CreationTimeUnixTimeInMs": 1598524903089,
  "ModificationTimeUnixTimeInMs": 1598524903091
}