{
  "Name": "get_url_reputation",
  "Description": "",
  "Script": "from SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import unix_now, convert_unixtime_to_datetime, output_handler, convert_dict_to_json_result_dict, add_prefix_to_dict\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED,EXECUTION_STATE_TIMEDOUT\nfrom SiemplifyDataModel import EntityTypes\nfrom cp_tr_manager import CheckPoint_TR_Manager\n\nimport json, copy\n# Example Consts:\nINTEGRATION_NAME = \"Check Point Threat Reputation\"\n\nSCRIPT_NAME = \"get_url_reputation\"\n\ndef get_unicode(u):\n    return str(u)\n\ndef dict_to_flat(target_dict):\n    \"\"\"\n    Receives nested dictionary and returns it as a flat dictionary.\n    :param target_dict: {dict}\n    :return: Flat dict : {dict}\n    \"\"\"\n    target_dict = copy.deepcopy(target_dict)\n\n    def expand(raw_key, raw_value):\n        key = raw_key\n        value = raw_value\n        \"\"\"\n        :param key: {string}\n        :param value: {string}\n        :return: Recursive function.\n        \"\"\"\n        if value is None:\n            return [(get_unicode(key), u\"\")]\n        elif isinstance(value, dict):\n            # Handle dict type value\n            return [(u\"{0}_{1}\".format(get_unicode(key),\n                                       get_unicode(sub_key)),\n                     get_unicode(sub_value)) for sub_key, sub_value in dict_to_flat(value).items()]\n        elif isinstance(value, list):\n            # Handle list type value\n            count = 1\n            l = []\n            items_to_remove = []\n            for value_item in value:\n                if isinstance(value_item, dict):\n                    # Handle nested dict in list\n                    l.extend([(u\"{0}_{1}_{2}\".format(get_unicode(key),\n                                                     get_unicode(count),\n                                                     get_unicode(sub_key)),\n                               sub_value)\n                              for sub_key, sub_value in dict_to_flat(value_item).items()])\n                    items_to_remove.append(value_item)\n                    count += 1\n                elif isinstance(value_item, list):\n                    l.extend(expand(get_unicode(key) + u'_' + get_unicode(count), value_item))\n                    count += 1\n                    items_to_remove.append(value_item)\n\n            for value_item in items_to_remove:\n                value.remove(value_item)\n\n            for value_item in value:\n                l.extend([(get_unicode(key) + u'_' + get_unicode(count), value_item)])\n                count += 1\n\n            return l\n        else:\n            return [(get_unicode(key), get_unicode(value))]\n\n    items = [item for sub_key, sub_value in target_dict.items() for item in\n             expand(sub_key, sub_value)]\n    return dict(items)\n\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n    siemplify.script_name = SCRIPT_NAME\n    siemplify.LOGGER.info(\"[ INFO ] ================= Main - Param Init =================\")\n\n    # INIT INTEGRATION CONFIGURATION:\n    client_key = siemplify.extract_configuration_param(provider_name=INTEGRATION_NAME,\n                                                    param_name=\"Client Key\")\n    api_root = siemplify.extract_configuration_param(provider_name=INTEGRATION_NAME,\n                                                    param_name=\"API Root\")\n                                                    \n    cp_manager = CheckPoint_TR_Manager(client_key=client_key, api_root=api_root)\n    confidence_threshold = 0\n    \n    siemplify.LOGGER.info(\"[ INFO ] ----------------- Main - Started -----------------\")\n    try:\n        status = EXECUTION_STATE_COMPLETED  # used to flag back to siemplify system, the action final status\n        output_message = \"output message :\"  # human readable message, showed in UI as the action result\n        result_value = None  # Set a simple result value, used for playbook if\\else and placeholders.\n        failed_entities = []  # In case this actions contains entity based logic, collect failed entity.identifiers\n        successfull_entities = []  # In case this actions contains entity based logic, collect successfull entity.identifiers\n        white_list_class = [\"Benign\", \"Unclassified\"]\n        \n        error_messages = []\n        json_result = {}\n\n        for entity in siemplify.target_entities:\n            siemplify.LOGGER.info(\"[ INFO ] Started processing entity: {}\".format(entity.identifier))\n            if entity.entity_type == EntityTypes.URL:\n                try:\n                    rep_data = cp_manager.get_url_rep(entity.identifier)['response'][0]\n                    rep_data_string = \"\"\"Classification: {}\n                                        Confidence: {}\n                                        Severity: {}\n                                        Risk: {}\n                                        \"\"\".format(rep_data['reputation']['classification'],\n                                                    rep_data['reputation']['confidence'],\n                                                    rep_data['reputation']['severity'],\n                                                    rep_data['risk'])\n                    try:\n                        indications = \"\\n\".join(rep_data['context']['indications'])\n                        rep_data_string = rep_data_string + \"\\n\" + indications\n                    except Exception as e: \n                        # print(\"No indications insight added.\")\n                        pass\n                    siemplify.add_entity_insight(entity, rep_data_string)\n                    # siemplify.result.add_result_json(rep_data)\n                    json_result[entity.identifier] = rep_data\n                    \n                    entity.additional_properties.update(add_prefix_to_dict(dict_to_flat(rep_data['reputation']), \"CP_ThreatReputation\"))\n                    if rep_data['risk'] > confidence_threshold and rep_data['reputation']['classification'] not in white_list_class:\n                        entity.is_suspicious = True\n\n                    successfull_entities.append(entity)\n                except Exception as e:\n                    failed_entities.append(entity.identifier)\n                    error_messages.append(\"{}: {}\".format(entity.identifier, str(e)))\n\n        if successfull_entities:\n            siemplify.update_entities(successfull_entities)\n            output_message += \"\\nSuccessfully processed entities:\\n   {}\".format(\"\\n   \".join(list(map(lambda x: x.identifier, successfull_entities))))\n        else:\n            output_message += \"\\nNo entities where processed.\"\n\n        result_value = len(successfull_entities)\n\n        if failed_entities:\n            output_message += \"\\nFailed processing entities:\\n   {}\".format(\"\\n   \".join(failed_entities))\n            output_message += \"\\nErrors: {}\".format(\", \".join(error_messages))\n            if not successfull_entities:\n                status = EXECUTION_STATE_FAILED\n\n    except Exception as e:\n        siemplify.LOGGER.error(\"[ ERROR ] General error performing action {}\".format(SCRIPT_NAME))\n        siemplify.LOGGER.exception(e)\n        raise  # used to return entire error details - including stacktrace back to client UI. Best for most usecases\n        # in case you want to handle the error yourself, don't raise, and handle error result ouputs:\n        status = EXECUTION_STATE_FAILED\n        result_value = \"Failed\"\n        output_message += \"\\n unknown failure\"\n\n\n    siemplify.end(output_message, result_value, status)\n\n\nif __name__ == \"__main__\":\n    main()\n",
  "IntegrationIdentifier": "Check Point Threat Reputation",
  "ScriptResultName": "ScriptResult",
  "DynamicResultsMetadata": [
    {
      "ResultName": "JsonResult",
      "ResultExample": "{}",
      "ShowResult": true
    }
  ],
  "Creator": "Harrison",
  "IsEnabled": true,
  "IsCustom": true,
  "IsSystem": false,
  "Version": 55.0,
  "TimeoutSeconds": 300,
  "Parameters": [],
  "DefaultResultValue": "",
  "PythonVersion": "None",
  "Id": 0,
  "CreationTimeUnixTimeInMs": 1598525375163,
  "ModificationTimeUnixTimeInMs": 1598525375165
}